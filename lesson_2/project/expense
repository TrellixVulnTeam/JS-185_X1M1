#!/usr/bin/env node

const { Client } = require("pg");
const { argv } = require('node:process');
const rlsync = require('readline-sync');
const fs = require('fs');
class CLI {
  constructor(args) {
    this.command = args[2];
    this.args = args.slice(3);
    this.processArguments();
  }

  processArguments() {
    let expenseData = new ExpenseData(this.command, this.args)

    switch (this.command) {
      case 'add':
        expenseData.insert(this.args);
        break;
      case 'list':
        expenseData.listExpenses();
        break;
      case 'search':
        expenseData.searchExpenses(this.args);
        break;
      case 'delete':
        expenseData.deleteExpense(this.args[0]);
        break;
      case 'clear':
        expenseData.deleteAllExpenses();
        break;
      default:
        expenseData.showHelp();
    }
  }
}

class ExpenseData {
  constructor(command, args) {
    this.database = new Client({
      user: 'steve',
      password: 'Atlant1c',
      database: 'js185lesson2project'
    })
  }

  async insert(values) {
    if (values.length === 2) {
      let queryText = 'INSERT INTO expenses (amount, memo) VALUES ($1, $2)'
      try {
        await this.database.connect();
        await this.setupSchema();
        await this.database.query(queryText, values);
        console.log('Insert successful');
        await this.database.end();
      } catch (error) {
        this.constructor.logErrorAndExit(error);
      }
    } else {
      this.constructor.logErrorAndExit(new Error('Must provide both amount and memo'));
    }
  }

  async listExpenses() {
    try {
      let queryString = "SELECT * FROM expenses ORDER BY created_on ASC"
      await this.database.connect();
      await this.setupSchema();
      let result = await this.database.query(queryString);
      this.constructor.displayExpenses(result.rows);
      await this.database.end();
    } catch (error) {
      this.constructor.logErrorAndExit(error);
    }
  }

  async searchExpenses(args) {
    let search = [args.join(' ')];
    let queryString = "SELECT * FROM expenses WHERE memo ILIKE '%' || $1 || '%' ORDER BY created_on ASC"
    try {
      await this.database.connect();
      await this.setupSchema();
      let result = await this.database.query(queryString, search);
      this.constructor.displayExpenses(result.rows);
      await this.database.end();
    } catch (error) {
      this.constructor.logErrorAndExit(error);
    }
  }

  async deleteExpense(id) {
    if (id === undefined) {
      this.constructor.logErrorAndExit('No search term provided');
    } else {
      let search = [id];
      let searchString = "SELECT * FROM expenses WHERE id = $1"
      let deleteString = "DELETE FROM expenses WHERE id = $1"
      try {
        await this.database.connect();
        await this.setupSchema();
        let searchResult = await this.database.query(searchString, search);
        if (searchResult.rows.length > 0) {
          await this.database.query(deleteString, search);
          console.log('The following expense was deleted');
          this.constructor.displayExpenses(searchResult.rows);
        } else {
          console.log(`There is no expense with the id ${id}`);
        }
        await this.database.end();
      } catch (error) {
        this.constructor.logErrorAndExit(error);
      }
    }
  }

  async deleteAllExpenses() {
    let input = rlsync.question('This will remove all expenses. Are you sure? (enter y to confirm)')
    if (input.toLowerCase() === 'y') {
      try {
        await this.database.connect();
        await this.setupSchema();
        let queryString = 'DELETE FROM expenses';
        await this.database.query(queryString)
        await this.database.end();
        console.log('All expenses have been deleted');
      } catch (error) {
        logErrorAndExit(error);
      }
    } else {
      console.log('Will not clear entries');
    }
  }

  showHelp() {
    console.log(this.constructor.initialText);
  }

  async setupSchema() {
    try {
      let existsResults = await this.database.query("SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'expenses'")
      let tableExists = existsResults.rows[0].count > 0;
      if (!tableExists) {
        let sqlSchema = await fs.promises.readFile('schema.sql', "utf8");
        await this.database.query(sqlSchema);
      }
    } catch (error) {
      this.constructor.logErrorAndExit(error)
    }
  }


  static initialText = `An expense recording system\n\nCommands:\n
  add AMOUNT MEMO [DATE] - record a new expense
  clear - delete all expenses
  list - list all expenses
  delete NUMBER - remove expense with id NUMBER
  search QUERY - list expenses with a matching memo field`

  static logErrorAndExit(error) {
    console.log(error);
    process.exit();
  }

  static displayExpenses(expenses) {
    let numOfExpenses = expenses.length;
    this.displayCount(numOfExpenses);
    if (numOfExpenses > 0) {
      let total = 0;
      let memoMaxLength = 0
      const AMOUNTPAD = 36;
      const AMOUNTJOINS = 3;
      expenses.forEach(row => {
        let columns = [
          `${row.id}`.padStart(3),
          row.created_on.toDateString().padStart(15),
          `$${row.amount}`.padStart(12),
          row.memo
        ]
        console.log(columns.join(' | '))
        if (row.memo.length > memoMaxLength) memoMaxLength = row.memo.length;
        total += Number(row.amount);
      })
      let totalLength = AMOUNTPAD + AMOUNTJOINS + memoMaxLength;
      total = (Math.round(total * 100) / 100).toFixed(2);
      this.displayTotal(total, AMOUNTPAD, totalLength);
      // console.log('-'.repeat(AMOUNTPAD + memoMaxLength + 8))
      // console.log(`Total` + `$${total}`.padStart(AMOUNTPAD));
    }
  }

  static displayCount(numOfExpenses) {
    if (numOfExpenses > 1) {
      console.log(`There are ${numOfExpenses} expenses:`);
    } else if (numOfExpenses === 1) {
      console.log(`There is ${numOfExpenses} expense:`);
    } else {
      console.log('There are no expenses.')
    }
  }

  static displayTotal(total, amountLength, fullLength) {
    let startText = 'Total';
    console.log('-'.repeat(fullLength));
    console.log(startText + `$${total}`.padStart(amountLength - startText.length));
  }


}

let app = new CLI(argv);
